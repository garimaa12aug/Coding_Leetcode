/*You are given intervals, each from to . You need to merge overlapping intervals to form a new interval. After all possible merging is done, you have a new set of mutually exclusive intervals.
Print the size of this new set of mutually exclusive intervals.*/



#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<bits/stdc++.h>
using namespace std;

struct Interval{
    int start;
    int end;
     Interval() : start(0), end(0) {}
     Interval(int s, int e) : start(s), end(e) {}
};

bool cmp(Interval a,Interval b){
return a.start<b.start;
}

vector<Interval> find_sol(vector<Interval> &A)
{
    
int n=A.size();
    //cout<<n;
if(n==0)
return A;
vector<Interval>ans;
sort(A.begin(),A.end(),cmp);
ans.push_back(A[0]);
for(int i=1;i<n;i++){
if(A[i].start>ans[ans.size()-1].end)
ans.push_back(A[i]);
else if(A[i].end>ans[ans.size()-1].end)
ans[ans.size()-1].end=A[i].end;

}
return ans;

}
int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */  
    vector<Interval>v;
    int n;
    cin>>n;
    int i;
    for(i=0;i<n;i++)
    {
        int x,y;
        cin>>x>>y;
        Interval z;
        z.start = x;
        z.end = y;
        v.push_back(z);
    }
    vector<Interval>ans = find_sol(v);
    cout<<ans.size();
    return 0;
}
