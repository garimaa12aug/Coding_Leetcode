/*Given two numbers represented by two linked lists of size N and M. The task is to return a sum list. 
The sum list which is a linked list representation of addition of two input numbers.....Geeks for geeks*/




// { Driver Code Starts
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* addTwoLists(struct Node* first, struct Node* second);

void push(struct Node** head_ref, int new_data) {
    struct Node* new_Node = new Node(new_data);
    new_Node->next = (*head_ref);
    (*head_ref) = new_Node;
}
void printList(struct Node* Node) {
    while (Node != NULL) {
        printf("%d ", Node->data);
        Node = Node->next;
    }
    printf("\n");
}
void freeList(struct Node* Node) {
    struct Node* temp;
    while (Node != NULL) {
        temp = Node;
        Node = Node->next;
        free(temp);
    }
}
int main(void) {
    int t, n, m, i, x;
    cin >> t;
    while (t--) {
        struct Node* res = NULL;
        struct Node* first = NULL;
        struct Node* second = NULL;
        cin >> n;
        for (i = 0; i < n; i++) {
            cin >> x;
            push(&first, x);
        }
        cin >> m;
        for (i = 0; i < m; i++) {
            cin >> x;
            push(&second, x);
        }
        res = addTwoLists(first, second);
        printList(res);
        if (first) freeList(first);
        if (second) freeList(second);
    }
    return 0;
}
// } Driver Code Ends

/*
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};
*/
// write a function returns the resultant linked list
Node* addTwoLists(Node* first, Node* second) {
    // Code here
   if(first == NULL)
   return second;
   if(second == NULL)
   return first;
   Node *p = first;
   Node *q = second;
  // Node *temp;
   Node *head=NULL;
   int carry = 0;
   int x;
   while(p!=NULL && q!=NULL)
   {
       x = p->data+q->data+carry;
       carry = x/10;
       x = x%10;
       Node *temp;
       temp = (struct Node*)malloc(sizeof(struct Node));
       temp->data = x;
       temp->next = NULL;
       if(head == NULL)
       {
           head = temp;
       }
       else
       {
           Node *w=head;
           while(w->next!=NULL)
           {
               w=w->next;
           }
           w->next = temp;
       }
       p=p->next;
       q=q->next;
       
   }
   
   while(p!=NULL)
   {
       x = p->data+carry;
       carry = x/10;
       x = x%10;
       Node *temp;
       temp = (struct Node*)malloc(sizeof(struct Node));
       temp->data = x;
       temp->next = NULL;
       if(head == NULL)
       {
           head = temp;
       }
       else
       {
           Node *w=head;
           while(w->next!=NULL)
           {
               w=w->next;
           }
           w->next = temp;
       }
       p=p->next;
       
   }
   while(q!=NULL)
   {
       x = q->data+carry;
       carry = x/10;
       x = x%10;
       Node *temp;
       temp = (struct Node*)malloc(sizeof(struct Node));
       temp->data = x;
       temp->next = NULL;
       if(head == NULL)
       {
           head = temp;
       }
       else
       {
           Node *w=head;
           while(w->next!=NULL)
           {
               w=w->next;
           }
           w->next = temp;
       }
       q=q->next;
       
   }
   if(carry !=0)
   {
       Node *temp;
       temp = (struct Node*)malloc(sizeof(struct Node));
       temp->data = carry;
       temp->next = NULL;
        Node *w=head;
           while(w->next!=NULL)
           {
               w=w->next;
           }
           w->next = temp;
   }
   return head;
}
